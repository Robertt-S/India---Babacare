==================== Setup ====================
Criar um enviroment:
    py -m venv venv

Ativar enviroment
    source venv/Scripts/activate
    source venv/bin/activate
    .\venv\Scripts\activate

    deactivate

Instalar os recurso
    py -m pip install Django
    (pode atualizar o pip se quiser)

==================== Comandos Server ====================

Dentro do env, PARA INICIAR O SERVER
    py manage.py runserver
    (clique no ip do server segurando Ctrl)
    ctrl+c no terminal para cessar o server

==================== urls.py ====================

    Neste arquivo dentro de urlpatterns, cada "path" colocado ser√° um sufixo
adicionado ao final do ip do server. Por exemplo:
        http://127.0.0.1:8000/ √© a home
        http://127.0.0.1:8000/about/ √© o sobre do site
        etc

    no m√©todo path, s√£o passados 2 argumento:
    path( 'sufixo do ip', m√©todo que ser√° chamado quando acessado o ip com sufixo ). 
Exemplo:
    path('about/', views.about), 
    (quando acessado http://127.0.0.1:8000/about/, um m√©todo no arquivo views ser√° chamado
    que far√° o processo de quando acessar o ip, "request")

==================== views.py ====================

   Os m√©todos contidos nessa classe s√£o as respostas de quando o usu√°rio
acessa o ip com sufixo.

    def homepage(request):
    #return HttpResponse('Hello World! I\'m home')
    return render(request, 'home.html')

    no primeiro return (comentado), se o user acessa o ip, ele s√≥ ver√° uma mensagem
    no segundo return, quando acessado a home do site, o arquivo html √© acessado, assim
ele √© mandado para um template do site

==================== Templates ====================

    Aqui est√£o os arquivos html que funcionam como o front-end do site, aquilo que o 
usu√°rio ver√°

==================== Templates ====================
HTML

    <title></title> - o que estiver escrito neste bloco aparece na aba do site (l√° em cima)
    <link rel="stylesheet" href="{% static 'css/style.css'%}"> - refer√™ncia de onde
o arquivo html tira as informa√ß√µes sobre o estilo da p√°gina
    <h1></h1> - mensagem que aparecer√° (n√£o necess√°riamente tem que ser h1, neste caso 
foram usadas a vari√°veis h1 e p, para escrever no site [ <p></p> ])

Exemplo:
    'nav' e 'a' s√£o vari√°veis
    onde nav √© um local definido onde vai aparecer coisas definidas por 'a'
    e 'a' √© um bot√£o por conta de "href" q direciona para home, about e posts
    o que est√° dentro do bloco <a></a> aparecer√° no site como um bot√£o
    <nav>
        <a href="/">üè†</a> | 
        <a href="/about">üòÅ</a> |
        <a href="/posts">üì∞</a>
    </nav>

    Para que tudo seja usado, o Django tem uma √°rea no arquivo "setup/setting.py" que far√°
refer√™ncia √† pasta de templates. Na √°rea "TEMPLATES" depois em DIRS[]

CSS
    ctrl + f5 para atualizar mudan√ßas no style.css
==================== Static ====================

    Neste diret√≥rio estar√£o arquivos est√°ticos, isto √©, arquivos que n√£o sofrer√£o mudan√ßas
a n√£o ser que por desejo do admin ou do programador do app. Estilos da p√°gina, frases ou
fontes de texto

    Para o Django reconhecer estes arquivos, no arquivo "setup/setting.py", ap√≥s "STATIC_URL",
foi criado uma lista de diret√≥rios, para o Django reconhecer,(STATICFILES_DIRS)

    {% load static %} √© adicionado aos arquivos html para "puxar" as informa√ß√µes dos arquivos 
"est√°ticos".  Por isso no block <link></link> o href, referencia {%static 'nome do arquivo'%}

==================== Posts ====================

    Apps s√£o peda√ßos de um projeto, com o intuito de diminuir a complexidade do projeto,
tipo SCRUM basicamente, mas em c√≥digo. Eles s√£o modulares, isto √©, ele s√£o como, literal,
pe√ßas, ent√£o √© poss√≠vel copiar o app de um projeto para o outro, ele funcionam independen-
mente.

py manage.py startapp 'nome do app'

referencia o views.py do setup
    [em posts/urls.py]
        path('', views.posts_list),
bota um link(sufixo) para posts
    [em setup/url.py]
        path('posts/', include('posts.urls'))

    include fala para o Django olhar dentro da pasta posts, 
e ver os urls dentro do arquivo urls.py

[em posts/views.py]
referencia os templates de posts
    def posts_list(request):
        return render(request, 'posts/posts_list.html')

==================== layout.html ====================

    Este arquivo funciona como template para outros html
    Funciona, de certa forma, como um interface e implementa√ß√£o, em Orienta√ß√£o
Orientada √† Objetos

[em layout.html]
    {% block title %}
            Django App
    {% endblock %}

    Este bloco tem nome de title e termina em endblock, entre essas linhas, "Django App"
aparecer√° por defini√ß√£o, caso n√£o seja alterado

[em home.html]
    {% extends 'layout.html' %} diz que o arquivo "implementa/extende" layout.html

    {%block title%}
        Home            substitui no layout.html
    {%endblock%}

==================== models.py ====================

    Models modelam informa√ß√µes e cada informa√ß√£o ter√° uma coluna na base de dados
    Classes --(migrate)-> colunas na base de dados

    class Post(models.Model):
    title = models.CharField(max_length=75)     t√≠tulo do post
    body = models.TextField()                   √°rea de input de texto
    slug = models.SlugField()                   sufixo ap√≥s posts (http.../posts/'slug')
    date = models.DateField(auto_now_add=True)  data do post (quando postado, automatico dia e data)

1 - migrar os models padr√µes do Django
    py manage.py migrate

2 - migrar o model criado
    py manage.py makemigrations
    (Serve tamb√©m para atualizar os models)
    
A√≠ ele cria a migration, no posts/migration/numeroDaMigra√ß√£o.py
Manda para o banco de dados
    py manage.py migrate

M√©todos criados no model, na classe, n√£o precisam migrar

========================================

ORM - Object Relational Mapping
    Intermediador do c√≥digo python e do banco de dados

Para abrir o menu interativo
    py manage.py shell
    from posts.models import Post

Cria uma instancia de Post
    p = Post()
Seta um titulo e salva no BD
    p.title = "My First Post!"
    p.save()
    Post.objects.all() - quantos objetos no BD
    Post.objects.all().delete() - limpa o BD

Para sair
    exit()

==================== Django Admin ====================

Acesse o site mas com o sufixo "/admin/"
    path('admin/', admin.site.urls),

Criar username e password (superUser)
    py manage.py createsuperuser

    Username (leave blank to use 'pc'): [coloque um username]
    Email address: [n√£o precisa colocar email, s√≥ d√™ ENTER]
    Password: [A senha deve ter 8 caracteres]

==================== admin.py ====================

    Neste arquivo estar√£o itens que gostariamos de ver no 'admin/', basta apenas
registrar os models
    admin.site.register(Post) -> no lugar de Post coloca-se o nome do model criado

[em posts/views.py]
    Passamos todos os posts para o html, usando a fun√ß√£o em views

[em posts_list.hmtl]
    √© feito um for para cada Post no BD 
    <article></article> - √© uma variavel que pode repetir basicamente
    tem um class="post", para futuramente adicionar um style para o post

    <h2> vai receber o t√≠tulo do post
    <p> 'par√°grafo' recebe a data e o texto do post (body)

==================== adicionando sufixos / SLUGS ====================

[em posts/urls.py]
Dando nome aos urls
    path('', views.posts_list, name="posts"),

[em layout.html]
    <a href="{% url 'posts' %}">üì∞</a>

    Estamos passando como referencia o nome dos urls posts no posts/urls.py,
href = "Eu quero como refer√™ncia..."
url = "esse url..."
'posts' = "que tem esse nome"

========================================

[em posts/urls.py]
Path converters
    path('<slug:slug>', views.post_page, name="page"),
<slug: slug> - 1¬∫ slug √© o path converter e nesse caso o par√¢metro √© slug tamb√©m, o nome do atributo da classe Post
post_page - m√©todo que vai ser criado em views.py
page - √© o nome do url

[em posts/views.py]
    def post_page(request, slug):
      return HttpResponse(slug)
Para fazer o teste se quando a url √© acessada, o slug √© printado no console do site

[em posts/templates/posts_list.html]
    em <h2>{{ post.title }}</h2> queremos passar um link em vez do titulo

    <h2>
        <a href="{% url 'page' slug=post.slug %}">
            {{ post.title }}
        </a>
    </h2>

    portanto passamos uma referencia √† url 'page' citada em urls.py e o slug do objeto post

[em posts/urls.py]
    #esses urls est√£o dentro do app posts
    app_name = 'posts'

Assim quando os urls dos posts s√£o chamados, devemos usar {% url 'posts:nomeDoUrl' %}

[em posts/views.py]
    def post_page(request, slug):
        post = Post.objects.get(slug=slug)
        return render(request, 'posts/post_page.html', {'post': post})
    
Quando chamada essa fun√ß√£o, vai retornar o site do respectivo post, conforme o slug passado

[em posts/templates.post_page.html]
    √â criada a estrutura do post

